using System.Text.Json.Serialization;

namespace WorkflowCreator.Models
{
    /// <summary>
    /// View model for displaying the results of AI-powered workflow processing.
    /// Contains comprehensive information about the analysis, SQL generation, and any issues encountered.
    /// </summary>
    public class WorkflowResultViewModel
    {
        /// <summary>
        /// Indicates whether the overall workflow processing was successful.
        /// True if both analysis and SQL generation completed successfully.
        /// </summary>
        public bool Success { get; set; }

        /// <summary>
        /// Human-readable message describing the result.
        /// Contains success confirmation or error details.
        /// </summary>
        public string? Message { get; set; }

        /// <summary>
        /// The workflow model created or updated during processing.
        /// Contains the workflow name, description, and generated SQL.
        /// </summary>
        public WorkflowModel? Workflow { get; set; }

        /// <summary>
        /// List of workflow steps extracted by AI analysis.
        /// Formatted for display in the UI (e.g., "1. Submit Request: Employee submits the request").
        /// </summary>
        public List<string>? Steps { get; set; }

        /// <summary>
        /// SQL statements generated by the local AI service.
        /// Ready to be executed in SQL Server Management Studio.
        /// </summary>
        public string? GeneratedSql { get; set; }

        /// <summary>
        /// System prompt used for SQL generation.
        /// Contains schema information and generation rules.
        /// Useful for debugging and understanding AI behavior.
        /// </summary>
        public string? SystemPrompt { get; set; }

        /// <summary>
        /// User prompt used for SQL generation.
        /// Contains the analyzed workflow information formatted for the AI.
        /// Useful for debugging and understanding AI input.
        /// </summary>
        public string? UserPrompt { get; set; }

        /// <summary>
        /// Total time taken for the entire workflow processing in milliseconds.
        /// Includes both analysis and SQL generation phases.
        /// </summary>
        public long ResponseTimeMs { get; set; }

        /// <summary>
        /// Detailed metadata about the analysis and generation process.
        /// Contains timing, AI provider info, token usage, caching status, etc.
        /// </summary>
        public Dictionary<string, object>? AnalysisMetadata { get; set; }

        /// <summary>
        /// Statuses that are required for this workflow but don't exist in the PAWS system.
        /// These need to be manually added to the PAWSActivityStatus table.
        /// </summary>
        public List<WorkflowStatus>? RequiredStatuses { get; set; }

        /// <summary>
        /// Existing statuses in the PAWS system that the workflow will use.
        /// These are mapped from the workflow requirements to current PAWS statuses.
        /// </summary>
        public List<WorkflowStatus>? ExistingStatuses { get; set; }

        /// <summary>
        /// Step-by-step processing information shown to the user during workflow creation.
        /// Examples: "✓ Analysis completed", "⚠ SQL generation warnings", "✗ Connection failed"
        /// </summary>
        public List<string>? ProcessingSteps { get; set; }

        /// <summary>
        /// Validation issues found during analysis or SQL generation.
        /// Non-fatal issues that don't prevent processing but should be reviewed.
        /// </summary>
        public List<string>? ValidationIssues { get; set; }

        /// <summary>
        /// Warnings generated during SQL creation.
        /// Examples: missing NEWID() calls, incomplete INSERT statements, etc.
        /// </summary>
        public List<string>? SqlWarnings { get; set; }

        /// <summary>
        /// Gets all statuses (required + existing) for the workflow.
        /// Useful for displaying complete status information in the UI.
        /// </summary>
        [JsonIgnore]
        public List<WorkflowStatus> AllStatuses
        {
            get
            {
                var all = new List<WorkflowStatus>();
                if (RequiredStatuses != null) all.AddRange(RequiredStatuses);
                if (ExistingStatuses != null) all.AddRange(ExistingStatuses);
                return all;
            }
        }

        /// <summary>
        /// Gets the count of new statuses that need to be manually created.
        /// </summary>
        [JsonIgnore]
        public int NewStatusCount => RequiredStatuses?.Count ?? 0;

        /// <summary>
        /// Gets the count of existing statuses that will be reused.
        /// </summary>
        [JsonIgnore]
        public int ExistingStatusCount => ExistingStatuses?.Count ?? 0;

        /// <summary>
        /// Gets the total number of workflow steps identified.
        /// </summary>
        [JsonIgnore]
        public int StepCount => Steps?.Count ?? 0;

        /// <summary>
        /// Gets whether the result has any warnings or issues to review.
        /// </summary>
        [JsonIgnore]
        public bool HasWarnings => (ValidationIssues?.Any() == true) || (SqlWarnings?.Any() == true);

        /// <summary>
        /// Gets whether SQL was successfully generated.
        /// </summary>
        [JsonIgnore]
        public bool HasGeneratedSql => !string.IsNullOrEmpty(GeneratedSql);

        /// <summary>
        /// Gets whether this result came from cached analysis.
        /// </summary>
        [JsonIgnore]
        public bool WasCached => AnalysisMetadata?.ContainsKey("WasCached") == true &&
                                (bool)(AnalysisMetadata["WasCached"]);

        /// <summary>
        /// Gets the AI provider used for analysis.
        /// </summary>
        [JsonIgnore]
        public string AnalysisProvider => AnalysisMetadata?.ContainsKey("CloudProvider") == true ?
                                        AnalysisMetadata["CloudProvider"].ToString() ?? "Unknown" : "Unknown";

        /// <summary>
        /// Gets the AI provider used for SQL generation.
        /// </summary>
        [JsonIgnore]
        public string SqlProvider => AnalysisMetadata?.ContainsKey("LocalProvider") == true ?
                                   AnalysisMetadata["LocalProvider"].ToString() ?? "Unknown" : "Unknown";

        /// <summary>
        /// Gets the analysis time in milliseconds (if available).
        /// </summary>
        [JsonIgnore]
        public long AnalysisTimeMs => AnalysisMetadata?.ContainsKey("AnalysisTimeMs") == true ?
                                    Convert.ToInt64(AnalysisMetadata["AnalysisTimeMs"]) : 0;

        /// <summary>
        /// Gets the SQL generation time in milliseconds (if available).
        /// </summary>
        [JsonIgnore]
        public long SqlGenerationTimeMs => AnalysisMetadata?.ContainsKey("SqlGenerationTimeMs") == true ?
                                         Convert.ToInt64(AnalysisMetadata["SqlGenerationTimeMs"]) : 0;

        /// <summary>
        /// Gets the number of tokens used for SQL generation (if available).
        /// </summary>
        [JsonIgnore]
        public int TokensUsed => AnalysisMetadata?.ContainsKey("SqlTokensUsed") == true ?
                               Convert.ToInt32(AnalysisMetadata["SqlTokensUsed"]) : 0;

        /// <summary>
        /// Gets a human-readable processing summary for display.
        /// </summary>
        [JsonIgnore]
        public string ProcessingSummary
        {
            get
            {
                if (!Success)
                    return $"Processing failed: {Message}";

                var summary = $"Workflow '{Workflow?.Name}' processed successfully";

                if (StepCount > 0)
                    summary += $" with {StepCount} steps";

                if (NewStatusCount > 0)
                    summary += $", {NewStatusCount} new statuses needed";

                if (HasWarnings)
                    summary += " (with warnings)";

                return summary;
            }
        }

        /// <summary>
        /// Gets performance information formatted for display.
        /// </summary>
        [JsonIgnore]
        public string PerformanceInfo
        {
            get
            {
                var parts = new List<string>();

                if (ResponseTimeMs > 0)
                    parts.Add($"Total: {ResponseTimeMs}ms");

                if (AnalysisTimeMs > 0)
                    parts.Add($"Analysis: {AnalysisTimeMs}ms");

                if (SqlGenerationTimeMs > 0)
                    parts.Add($"SQL: {SqlGenerationTimeMs}ms");

                if (TokensUsed > 0)
                    parts.Add($"Tokens: {TokensUsed}");

                if (WasCached)
                    parts.Add("(cached)");

                return parts.Any() ? string.Join(" | ", parts) : "No timing data available";
            }
        }

        /// <summary>
        /// Gets AI provider information formatted for display.
        /// </summary>
        [JsonIgnore]
        public string ProviderInfo
        {
            get
            {
                var parts = new List<string>();

                if (!string.IsNullOrEmpty(AnalysisProvider) && AnalysisProvider != "Unknown")
                    parts.Add($"Analysis: {AnalysisProvider}");

                if (!string.IsNullOrEmpty(SqlProvider) && SqlProvider != "Unknown")
                    parts.Add($"SQL: {SqlProvider}");

                return parts.Any() ? string.Join(" | ", parts) : "Provider information not available";
            }
        }

        /// <summary>
        /// Creates a basic error result for when processing fails early.
        /// </summary>
        /// <param name="errorMessage">Error message to display</param>
        /// <param name="processingTimeMs">Time taken before failure</param>
        /// <returns>Error result view model</returns>
        public static WorkflowResultViewModel CreateError(string errorMessage, long processingTimeMs = 0)
        {
            return new WorkflowResultViewModel
            {
                Success = false,
                Message = errorMessage,
                ResponseTimeMs = processingTimeMs,
                ProcessingSteps = new List<string> { $"✗ Error: {errorMessage}" }
            };
        }

        /// <summary>
        /// Creates a partial success result when analysis succeeds but SQL generation fails.
        /// </summary>
        /// <param name="workflow">Successfully analyzed workflow</param>
        /// <param name="analysisResult">Analysis result</param>
        /// <param name="sqlError">SQL generation error</param>
        /// <returns>Partial success result view model</returns>
        public static WorkflowResultViewModel CreatePartialSuccess(
            WorkflowModel workflow,
            WorkflowAnalysisResult analysisResult,
            string sqlError)
        {
            return new WorkflowResultViewModel
            {
                Success = false, // Overall failure due to SQL generation
                Message = $"Analysis completed successfully, but SQL generation failed: {sqlError}",
                Workflow = workflow,
                Steps = analysisResult.Steps?.Select(s => $"{s.Order}. {s.Title}: {s.Description}").ToList(),
                RequiredStatuses = analysisResult.RequiredStatuses,
                ExistingStatuses = analysisResult.ExistingStatuses,
                ProcessingSteps = new List<string>
                {
                    $"✓ Analysis completed: '{analysisResult.WorkflowName}' with {analysisResult.Steps?.Count ?? 0} steps",
                    $"✗ SQL generation failed: {sqlError}"
                }
            };
        }

        /// <summary>
        /// Validates the result data for consistency.
        /// </summary>
        /// <returns>List of validation issues found</returns>
        public List<string> ValidateResult()
        {
            var issues = new List<string>();

            if (Success && string.IsNullOrEmpty(GeneratedSql))
                issues.Add("Successful result should have generated SQL");

            if (!Success && string.IsNullOrEmpty(Message))
                issues.Add("Failed result should have an error message");

            if (Workflow != null && string.IsNullOrEmpty(Workflow.Name))
                issues.Add("Workflow should have a name");

            if (Steps != null && Steps.Any() && !Steps.Any(s => !string.IsNullOrEmpty(s)))
                issues.Add("Steps list should not contain empty entries");

            if (ResponseTimeMs < 0)
                issues.Add("Response time cannot be negative");

            return issues;
        }

        /// <summary>
        /// Creates a summary for logging purposes.
        /// </summary>
        /// <returns>Concise summary string</returns>
        public string ToLogSummary()
        {
            var summary = $"Success: {Success}";

            if (Workflow != null)
                summary += $", Workflow: '{Workflow.Name}' (ID: {Workflow.Id})";

            summary += $", Time: {ResponseTimeMs}ms";

            if (StepCount > 0)
                summary += $", Steps: {StepCount}";

            if (HasGeneratedSql)
                summary += ", SQL: Generated";

            if (HasWarnings)
                summary += ", Warnings: Yes";

            return summary;
        }
    }
}
