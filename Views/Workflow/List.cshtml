@model List<WorkflowCreator.Models.WorkflowModel>
@{
    ViewData["Title"] = "My AI-Generated Workflows";
    var totalWorkflows = ViewBag.TotalWorkflows as int? ?? Model.Count;
    var generatedWorkflows = ViewBag.GeneratedWorkflows as int? ?? Model.Count(w => !string.IsNullOrEmpty(w.GeneratedSql));
    var recentWorkflows = ViewBag.RecentWorkflows as int? ?? Model.Count(w => w.CreatedAt > DateTime.UtcNow.AddDays(-7));
}

<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .list-container {
        padding-top: 30px;
        padding-bottom: 50px;
    }

    .list-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.15);
        padding: 40px;
        margin-bottom: 30px;
        animation: slideUp 0.6s ease-out;
    }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .header-section {
        text-align: center;
        margin-bottom: 30px;
    }

    .header-title {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .stats-section {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 30px;
        border: 1px solid #2196f3;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
        margin-top: 15px;
    }

    .stat-item {
        background: white;
        border-radius: 10px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }

        .stat-item:hover {
            transform: translateY(-3px);
        }

    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: #2196f3;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .workflow-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .workflow-item {
        background: white;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        animation: slideInRight 0.5s ease-out;
        position: relative;
        overflow: hidden;
    }

        .workflow-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

        .workflow-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }

    @@keyframes slideInRight {
        from

    {
        opacity: 0;
        transform: translateX(20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    .workflow-header {
        display: flex;
        justify-content: space-between;
        align-items: start;
        margin-bottom: 15px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .workflow-title {
        color: #2d3748;
        font-weight: 700;
        font-size: 1.3rem;
        margin: 0;
        flex: 1;
    }

    .workflow-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 15px;
    }

    .meta-badge {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        color: #495057;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        border: 1px solid #dee2e6;
    }

    .workflow-description {
        color: #6c757d;
        line-height: 1.6;
        margin-bottom: 20px;
        font-size: 0.95rem;
    }

    .workflow-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .status-badge.status-generated {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
        }

        .status-badge.status-analyzed {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
            color: white;
        }

        .status-badge.status-processing {
            background: linear-gradient(135deg, #17a2b8 0%, #007bff 100%);
            color: white;
        }

        .status-badge.status-error {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
        }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #6c757d;
    }

    .empty-icon {
        font-size: 4rem;
        color: #dee2e6;
        margin-bottom: 20px;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
        border: none;
    }

    .btn-primary-action {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .btn-primary-action:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
            color: white;
        }

    .btn-secondary-action {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        color: #495057;
        border: 1px solid #dee2e6;
    }

        .btn-secondary-action:hover {
            background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
            color: #495057;
        }

    .btn-success-action {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
    }

        .btn-success-action:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(40, 167, 69, 0.3);
            color: white;
        }

    .bulk-actions {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 25px;
        border: 1px solid #dee2e6;
    }

    @@media (max-width: 768px) {
        .list-card

    {
        padding: 20px;
        margin: 10px;
    }

    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .workflow-header {
        flex-direction: column;
        align-items: start;
    }

    .workflow-actions {
        width: 100%;
        justify-content: center;
    }

    }
</style>

<div class="container list-container">
    <div class="row">
        <div class="col-12">

            <!-- Header -->
            <div class="list-card">
                <div class="header-section">
                    <h1 class="header-title fw-bold">
                        <i class="fas fa-history me-2"></i>My AI-Generated Workflows
                    </h1>
                    <p class="text-muted fs-5">Manage your workflows created with hybrid AI technology</p>
                </div>

                <!-- Statistics -->
                @if (Model.Any())
                {
                    <div class="stats-section">
                        <h5 class="fw-bold mb-3">
                            <i class="fas fa-chart-bar me-2"></i>Overview
                        </h5>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <div class="stat-value">@totalWorkflows</div>
                                <div class="stat-label">Total Workflows</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">@generatedWorkflows</div>
                                <div class="stat-label">With Generated SQL</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">@recentWorkflows</div>
                                <div class="stat-label">Created This Week</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">@((double)generatedWorkflows / Math.Max(totalWorkflows, 1) * 100):F1%</div>
                                <div class="stat-label">Success Rate</div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Bulk Actions -->
                @if (Model.Any())
                {
                    <div class="bulk-actions">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="mb-0"><i class="fas fa-tools me-2"></i>Bulk Actions</h6>
                                <small class="text-muted">Perform actions on multiple workflows</small>
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-success-action" onclick="downloadAllSql()">
                                    <i class="fas fa-download me-1"></i>Download All SQL
                                </button>
                                <button class="btn btn-secondary-action" onclick="exportWorkflows()">
                                    <i class="fas fa-file-export me-1"></i>Export List
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Workflow List -->
            @if (Model.Any())
            {
                <div class="workflow-list">
                    @foreach (var workflow in Model.OrderByDescending(w => w.CreatedAt))
                    {
                        <div class="workflow-item" style="animation-delay: @(Model.ToList().IndexOf(workflow) * 0.1)s">
                            <div class="workflow-header">
                                <div>
                                    <h4 class="workflow-title">@workflow.Name</h4>
                                    <div class="workflow-meta">
                                        <span class="meta-badge">
                                            <i class="fas fa-hashtag me-1"></i>ID: @workflow.Id
                                        </span>
                                        <span class="meta-badge">
                                            <i class="fas fa-calendar me-1"></i>@GetWorkflowAge(workflow.CreatedAt)
                                        </span>
                                        @if (!string.IsNullOrEmpty(workflow.GeneratedSql))
                                        {
                                            <span class="meta-badge">
                                                <i class="fas fa-database me-1"></i>@GetSqlSize(workflow.GeneratedSql)
                                            </span>
                                        }
                                    </div>
                                </div>
                                <span class="status-badge status-@(workflow.Status?.ToLower() ?? "unknown")">
                                    @workflow.Status
                                </span>
                            </div>

                            <div class="workflow-description">
                                @if (workflow.Description.Length > 200)
                                {
                                    <span>@workflow.Description.Substring(0, 200)...</span>
                                }
                                else
                                {
                                    <span>@workflow.Description</span>
                                }
                            </div>

                            <div class="workflow-actions">
                                <a href="/Workflow/Details/@workflow.Id" class="btn btn-primary-action">
                                    <i class="fas fa-eye me-1"></i>View Details
                                </a>
                                @if (!string.IsNullOrEmpty(workflow.GeneratedSql))
                                {
                                    <button class="btn btn-success-action" onclick="downloadWorkflowSql(@workflow.Id, '@Html.Raw(workflow.Name.Replace("'", "\\'"))')">
                                        <i class="fas fa-download me-1"></i>Download SQL
                                    </button>
                                }
                                <button class="btn btn-secondary-action" onclick="duplicateWorkflow('@Html.Raw(workflow.Description.Replace("'", "\\'"))')">
                                    <i class="fas fa-copy me-1"></i>Duplicate
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="list-card">
                    <div class="empty-state">
                        <div class="empty-icon">
                            <i class="fas fa-robot"></i>
                        </div>
                        <h3 class="mb-3">No Workflows Yet</h3>
                        <p class="mb-4">Ready to create your first AI-powered workflow? Our intelligent system will analyze your business process and generate the complete SQL implementation.</p>
                        <a href="/Workflow" class="btn btn-primary-action btn-lg">
                            <i class="fas fa-plus me-2"></i>Create Your First Workflow
                        </a>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<script>
    function downloadWorkflowSql(workflowId, workflowName) {
        // In a real implementation, this would fetch the SQL from the server
        // For now, assuming SQL is embedded or accessible
        const workflow = @Html.Raw(Json.Serialize(Model));
        const targetWorkflow = workflow.find(w => w.id === workflowId);

        if (targetWorkflow && targetWorkflow.generatedSql) {
            const filename = `${workflowName.replace(/[^a-z0-9]/gi, '_')}_Workflow.sql`;

            const element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(targetWorkflow.generatedSql));
            element.setAttribute('download', filename);
            element.style.display = 'none';

            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        } else {
            alert('SQL not available for this workflow');
        }
    }

    function downloadAllSql() {
        const workflows = @Html.Raw(Json.Serialize(Model));
        const sqlWorkflows = workflows.filter(w => w.generatedSql);

        if (sqlWorkflows.length === 0) {
            alert('No workflows with generated SQL found');
            return;
        }

        let allSql = '-- ================================================\n';
        allSql += '-- ALL WORKFLOWS SQL EXPORT\n';
        allSql += `-- Generated: ${new Date().toISOString()}\n`;
        allSql += `-- Total Workflows: ${sqlWorkflows.length}\n`;
        allSql += '-- ================================================\n\n';

        sqlWorkflows.forEach((workflow, index) => {
            allSql += `-- ================================================\n`;
            allSql += `-- WORKFLOW ${index + 1}: ${workflow.name}\n`;
            allSql += `-- Created: ${workflow.createdAt}\n`;
            allSql += `-- ================================================\n\n`;
            allSql += workflow.generatedSql + '\n\n';
        });

        const filename = `All_Workflows_SQL_${new Date().toISOString().split('T')[0]}.sql`;

        const element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(allSql));
        element.setAttribute('download', filename);
        element.style.display = 'none';

        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    function exportWorkflows() {
        const workflows = @Html.Raw(Json.Serialize(Model));
        const exportData = workflows.map(w => ({
            id: w.id,
            name: w.name,
            status: w.status,
            createdAt: w.createdAt,
            hasSql: !!w.generatedSql,
            description: w.description.substring(0, 100) + (w.description.length > 100 ? '...' : '')
        }));

        const csv = convertToCSV(exportData);
        const filename = `Workflows_Export_${new Date().toISOString().split('T')[0]}.csv`;

        const element = document.createElement('a');
        element.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv));
        element.setAttribute('download', filename);
        element.style.display = 'none';

        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    function convertToCSV(data) {
        if (!data.length) return '';

        const headers = Object.keys(data[0]);
        const csvHeaders = headers.join(',');
        const csvRows = data.map(row =>
            headers.map(header => {
                const value = row[header];
                return typeof value === 'string' ? `"${value.replace(/"/g, '""')}"` : value;
            }).join(',')
        );

        return [csvHeaders, ...csvRows].join('\n');
    }

    function duplicateWorkflow(description) {
        // Redirect to create page with pre-filled description
        const encodedDescription = encodeURIComponent(description);
        window.location.href = `/Workflow?description=${encodedDescription}`;
    }

    // Initialize tooltips and animations
    document.addEventListener('DOMContentLoaded', function() {
        // Stagger animations for workflow items
        const workflowItems = document.querySelectorAll('.workflow-item');
        workflowItems.forEach((item, index) => {
            item.style.animationDelay = `${index * 0.1}s`;
        });

        // Initialize tooltips if any
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>

@functions {
    private string GetStatusBadgeClass(string? status)
    {
        return status?.ToLower() switch
        {
            "generated" => "success",
            "analyzed" => "warning",
            "processing" => "info",
            "error" => "danger",
            _ => "secondary"
        };
    }

    private string GetWorkflowAge(DateTime createdAt)
    {
        var age = DateTime.UtcNow - createdAt;
        if (age.TotalDays >= 1)
            return $"{(int)age.TotalDays} day{((int)age.TotalDays > 1 ? "s" : "")} ago";
        if (age.TotalHours >= 1)
            return $"{(int)age.TotalHours} hour{((int)age.TotalHours > 1 ? "s" : "")} ago";
        return $"{(int)age.TotalMinutes} minute{((int)age.TotalMinutes > 1 ? "s" : "")} ago";
    }

    private string GetSqlSize(string? sql)
    {
        if (string.IsNullOrEmpty(sql)) return "No SQL";

        var lines = sql.Split('\n').Length;
        var chars = sql.Length;

        if (chars > 1024)
            return $"{chars / 1024:F1}KB ({lines} lines)";
        return $"{chars} chars ({lines} lines)";
    }
}