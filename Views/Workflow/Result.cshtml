@model WorkflowCreator.Models.WorkflowResultViewModel
@{
    ViewData["Title"] = Model.Success ? "Workflow Generated Successfully" : "Workflow Processing Result";
}

<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .result-container {
        padding-top: 30px;
        padding-bottom: 50px;
    }

    .result-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.15);
        padding: 40px;
        margin-bottom: 30px;
        animation: slideUp 0.6s ease-out;
        position: relative;
        overflow: hidden;
    }

        .result-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #28a745, #20c997);
        }

        .result-card.error::before {
            background: linear-gradient(90deg, #dc3545, #fd7e14);
        }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .success-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .success-icon {
        font-size: 60px;
        color: #28a745;
        margin-bottom: 15px;
        animation: bounceIn 0.8s ease-out;
    }

    .error-icon {
        font-size: 60px;
        color: #dc3545;
        margin-bottom: 15px;
        animation: bounceIn 0.8s ease-out;
    }

    @@keyframes bounceIn {
        0%, 20%, 40%, 60%, 80%

    {
        transform: translateY(0);
    }

    50% {
        transform: translateY(-10px);
    }

    }

    .processing-steps {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .step-item {
        display: flex;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

        .step-item:last-child {
            border-bottom: none;
        }

    .step-icon {
        width: 30px;
        text-align: center;
        margin-right: 15px;
        font-size: 18px;
    }

    .workflow-steps {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .workflow-step {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
        border-left: 4px solid #667eea;
        animation: slideInRight 0.5s ease-out;
    }

    @@keyframes slideInRight {
        from

    {
        opacity: 0;
        transform: translateX(20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    .status-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .status-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
        border-left: 4px solid #28a745;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .status-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }

        .status-card.new-status {
            border-left-color: #ffc107;
        }

    .sql-section {
        background: #2d3748;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        color: white;
        position: relative;
        overflow: hidden;
    }

        .sql-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

    .sql-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .sql-actions {
        display: flex;
        gap: 10px;
    }

    .sql-content {
        background: #1a202c;
        border-radius: 10px;
        padding: 20px;
        overflow-x: auto;
        position: relative;
    }

    .sql-code {
        font-family: 'Courier New', monospace;
        font-size: 14px;
        line-height: 1.6;
        color: #e2e8f0;
        white-space: pre;
        margin: 0;
    }

    .copy-button {
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(102, 126, 234, 0.8);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 12px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .copy-button:hover {
            background: rgba(102, 126, 234, 1);
        }

    .copy-indicator {
        position: absolute;
        top: 15px;
        right: 120px;
        background: #28a745;
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .copy-indicator.show {
            opacity: 1;
        }

    .floating-actions {
        position: fixed;
        bottom: 30px;
        right: 30px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        z-index: 1000;
    }

    .btn-floating {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: none;
        color: white;
        font-size: 20px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

        .btn-floating:hover {
            transform: scale(1.1);
            box-shadow: 0 12px 30px rgba(0,0,0,0.3);
            color: white;
        }

        .btn-floating.primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .btn-floating.success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .metric-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        border-left: 4px solid #667eea;
    }

    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
        margin-bottom: 5px;
    }

    .metric-label {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .accordion-custom {
        margin-top: 25px;
    }

        .accordion-custom .accordion-body {
            background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
            color: white;
        }

        .accordion-custom .accordion-item {
            border: none;
            margin-bottom: 10px;
            border-radius: 10px;
            overflow: hidden;
        }

        .accordion-custom .accordion-button {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: none;
            border-radius: 10px;
        }

            .accordion-custom .accordion-button:not(.collapsed) {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }

    .error-details {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        border: 1px solid #dc3545;
    }

    @@media (max-width: 768px) {
        .result-card

    {
        padding: 20px;
        margin: 10px;
    }

    .metrics-grid,
    .status-grid {
        grid-template-columns: 1fr;
    }

    }
</style>

<div class="container result-container">
    <div class="row">
        <div class="col-12">

            <!-- Single Unified Header -->
            <div class="result-card @(Model.Success ? "" : "error")">
                @if (Model.Success)
                {
                    <div class="success-header">
                        <div class="success-icon">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <h1 class="text-success fw-bold">Workflow Generated Successfully!</h1>
                        <p class="text-muted fs-5">AI analysis and SQL generation completed</p>
                        <div class="badge bg-success fs-6">
                            <i class="fas fa-clock me-1"></i>Completed in @Model.ResponseTimeMs ms
                        </div>
                    </div>
                }
                else
                {
                    <div class="success-header">
                        <div class="error-icon">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                        <h1 class="text-danger fw-bold">Processing Encountered Issues</h1>
                        <p class="text-muted fs-5">@Model.Message</p>
                        <div class="badge bg-danger fs-6">
                            <i class="fas fa-clock me-1"></i>Stopped after @Model.ResponseTimeMs ms
                        </div>
                    </div>
                }

                <!-- Workflow Information (moved into main header card) -->
                @if (Model.Workflow != null)
                {
                    <div class="mt-4 pt-4" style="border-top: 1px solid #dee2e6;">
                        <h3><i class="fas fa-info-circle me-2"></i>Workflow Details</h3>
                        <div class="workflow-info">
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-tag"></i></div>
                                <div><strong>Name:</strong> @Model.Workflow.Name</div>
                            </div>
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-hashtag"></i></div>
                                <div><strong>ID:</strong> @Model.Workflow.Id</div>
                            </div>
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-calendar"></i></div>
                                <div><strong>Created:</strong> @Model.Workflow.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss UTC")</div>
                            </div>
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-flag"></i></div>
                                <div><strong>Status:</strong> <span class="badge bg-@(Model.Success ? "success" : "warning")">@Model.Workflow.Status</span></div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Processing Steps -->
            @if (Model.ProcessingSteps != null && Model.ProcessingSteps.Any())
            {
                <div class="result-card">
                    <h3><i class="fas fa-list-ol me-2"></i>Processing Timeline</h3>
                    <div class="processing-steps">
                        @foreach (var step in Model.ProcessingSteps)
                        {
                            <div class="step-item">
                                <div class="step-icon">
                                    @if (step.StartsWith("✓"))
                                    {
                                        <i class="fas fa-check-circle text-success"></i>
                                    }
                                    else if (step.StartsWith("⚠"))
                                    {
                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                    }
                                    else if (step.StartsWith("✗"))
                                    {
                                        <i class="fas fa-times-circle text-danger"></i>
                                    }
                                    else
                                    {
                                        <i class="fas fa-info-circle text-info"></i>
                                    }
                                </div>
                                <div>@step</div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Workflow Steps -->
            @if (Model.Steps != null && Model.Steps.Any())
            {
                <div class="result-card">
                    <h3><i class="fas fa-project-diagram me-2"></i>AI-Analyzed Workflow Steps</h3>
                    <div class="workflow-steps">
                        @for (int i = 0; i < Model.Steps.Count; i++)
                        {
                            <div class="workflow-step" style="animation-delay: @(i * 0.1)s">
                                <div class="d-flex align-items-start">
                                    <span class="badge bg-primary rounded-pill me-3 mt-1">@(i + 1)</span>
                                    <div>@Model.Steps[i]</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Status Mapping -->
            @if (Model.AllStatuses.Any())
            {
                <div class="result-card">
                    <h3><i class="fas fa-tags me-2"></i>Status Analysis</h3>
                    <div class="status-section">
                        <p class="mb-3">AI identified the following status requirements for your workflow:</p>
                        <div class="status-grid">
                            @if (Model.ExistingStatuses != null && Model.ExistingStatuses.Any())
                            {
                                @foreach (var status in Model.ExistingStatuses)
                                {
                                    <div class="status-card">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="fas fa-check-circle text-success me-2"></i>
                                            <strong>@status.Name</strong>
                                            <span class="badge bg-success ms-auto">Existing</span>
                                        </div>
                                        <div class="small text-muted mb-1">ID: @status.ExistingId</div>
                                        <div class="small">@status.Description</div>
                                    </div>
                                }
                            }

                            @if (Model.RequiredStatuses != null && Model.RequiredStatuses.Any())
                            {
                                @foreach (var status in Model.RequiredStatuses)
                                {
                                    <div class="status-card new-status">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="fas fa-plus-circle text-warning me-2"></i>
                                            <strong>@status.Name</strong>
                                            <span class="badge bg-warning ms-auto">New</span>
                                        </div>
                                        <div class="small text-muted mb-1">Needs Creation</div>
                                        <div class="small">@status.Description</div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Generated SQL -->
            @if (!string.IsNullOrEmpty(Model.GeneratedSql))
            {
                <div class="result-card">
                    <div class="sql-section">
                        <div class="sql-header">
                            <h3><i class="fas fa-database me-2"></i>Generated SQL</h3>
                            <div class="sql-actions">
                                <button class="btn btn-outline-light btn-sm" onclick="copySql()">
                                    <i class="fas fa-copy me-1"></i>Copy SQL
                                </button>
                                <button class="btn btn-outline-light btn-sm" onclick="downloadSql()">
                                    <i class="fas fa-download me-1"></i>Download
                                </button>
                            </div>
                        </div>
                        <div class="sql-content">
                            <pre class="sql-code" id="sqlCode">@Model.GeneratedSql</pre>
                            <button class="copy-button" onclick="copySql()">
                                <i class="fas fa-copy"></i>
                            </button>
                            <div class="copy-indicator" id="copyIndicator">Copied!</div>
                        </div>
                    </div>
                </div>
            }

            <!-- Processing Metrics -->
            @if (Model.AnalysisMetadata != null && Model.AnalysisMetadata.Any())
            {
                <div class="result-card">
                    <h3><i class="fas fa-chart-line me-2"></i>Processing Metrics</h3>
                    <div class="metrics-grid">
                        @if (Model.AnalysisMetadata.ContainsKey("StepCount"))
                        {
                            <div class="metric-card">
                                <div class="metric-value">@Model.AnalysisMetadata["StepCount"]</div>
                                <div class="metric-label">Workflow Steps</div>
                            </div>
                        }
                        @if (Model.AnalysisMetadata.ContainsKey("RequiredStatusCount"))
                        {
                            <div class="metric-card">
                                <div class="metric-value">@Model.AnalysisMetadata["RequiredStatusCount"]</div>
                                <div class="metric-label">Status Mappings</div>
                            </div>
                        }
                        @if (Model.AnalysisMetadata.ContainsKey("AnalysisTimeMs"))
                        {
                            <div class="metric-card">
                                <div class="metric-value">@Model.AnalysisMetadata["AnalysisTimeMs"]ms</div>
                                <div class="metric-label">Analysis Time</div>
                            </div>
                        }
                        @if (Model.AnalysisMetadata.ContainsKey("SqlGenerationTimeMs"))
                        {
                            <div class="metric-card">
                                <div class="metric-value">@Model.AnalysisMetadata["SqlGenerationTimeMs"]ms</div>
                                <div class="metric-label">SQL Generation</div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Technical Details (Collapsible) -->
            @if (!string.IsNullOrEmpty(Model.SystemPrompt) || !string.IsNullOrEmpty(Model.UserPrompt))
            {
                <div class="result-card">
                    <h3><i class="fas fa-cogs me-2"></i>Technical Details</h3>
                    <div class="accordion accordion-custom" id="technicalAccordion">
                        @if (!string.IsNullOrEmpty(Model.SystemPrompt))
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#systemPrompt" aria-expanded="false">
                                        <i class="fas fa-terminal me-2"></i>System Prompt
                                    </button>
                                </h2>
                                <div id="systemPrompt" class="accordion-collapse collapse" data-bs-parent="#technicalAccordion">
                                    <div class="accordion-body">
                                        <pre style="white-space: pre-wrap; font-family: monospace; font-size: 0.85rem;">@Model.SystemPrompt</pre>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(Model.UserPrompt))
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#userPrompt" aria-expanded="false">
                                        <i class="fas fa-user me-2"></i>User Prompt
                                    </button>
                                </h2>
                                <div id="userPrompt" class="accordion-collapse collapse" data-bs-parent="#technicalAccordion">
                                    <div class="accordion-body">
                                        <pre style="white-space: pre-wrap; font-family: monospace; font-size: 0.85rem;">@Model.UserPrompt</pre>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="result-card text-center">
                <div class="d-flex gap-3 justify-content-center flex-wrap">
                    <a href="/Workflow" class="btn btn-primary btn-lg">
                        <i class="fas fa-plus me-2"></i>Create Another Workflow
                    </a>
                    <a href="/Workflow/List" class="btn btn-outline-primary btn-lg">
                        <i class="fas fa-list me-2"></i>View All Workflows
                    </a>
                    @if (!string.IsNullOrEmpty(Model.GeneratedSql))
                    {
                        <button class="btn btn-success btn-lg" onclick="downloadSql()">
                            <i class="fas fa-download me-2"></i>Download SQL
                        </button>
                    }
                </div>
            </div>

        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js"></script>

<script>
    function copySql() {
        const sqlCode = document.getElementById('sqlCode');
        const indicator = document.getElementById('copyIndicator');

        navigator.clipboard.writeText(sqlCode.textContent).then(function() {
            indicator.classList.add('show');
            setTimeout(() => indicator.classList.remove('show'), 2000);
        });
    }

    function downloadSql() {
        const sqlContent = document.getElementById('sqlCode').textContent;
        const workflowName = '@Html.Raw(Model.Workflow?.Name?.Replace("'", "\\'") ?? "Workflow")';
        const filename = `${workflowName.replace(/[^a-z0-9]/gi, '_')}_Workflow.sql`;

        const element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(sqlContent));
        element.setAttribute('download', filename);
        element.style.display = 'none';

        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    // Page load animation
    document.addEventListener('DOMContentLoaded', function() {
        document.body.style.animation = 'fadeIn 0.5s ease-in';
    });
</script>

<style>
    .info-item {
        display: flex;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }

        .info-item:last-child {
            border-bottom: none;
        }

    .info-icon {
        width: 30px;
        color: #667eea;
        margin-right: 15px;
    }

    .workflow-info {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }
</style>