@model WorkflowCreator.Models.WorkflowResultViewModel
@{
    ViewData["Title"] = Model.Success ? "Workflow Generated Successfully" : "Workflow Processing Result";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - WorkflowCreator</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .navbar-custom {
            background: white;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-bottom: 3px solid #667eea;
        }

        .result-container {
            padding-top: 30px;
            padding-bottom: 50px;
        }

        .result-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.15);
            padding: 40px;
            margin-bottom: 30px;
            animation: slideUp 0.6s ease-out;
            position: relative;
            overflow: hidden;
        }

            .result-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, #28a745, #20c997) when success, linear-gradient(90deg, #dc3545, #fd7e14) when error;
            }

        @keyframes slideUp {
            from

        {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .success-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .success-icon {
            font-size: 60px;
            color: #28a745;
            margin-bottom: 15px;
            animation: bounceIn 0.8s ease-out;
        }

        .error-icon {
            font-size: 60px;
            color: #dc3545;
            margin-bottom: 15px;
            animation: shake 0.8s ease-out;
        }

        @keyframes bounceIn {
            0%

        {
            transform: scale(0.3);
            opacity: 0;
        }

        50% {
            transform: scale(1.05);
        }

        70% {
            transform: scale(0.9);
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }

        }

        @keyframes shake {
            0%, 100%

        {
            transform: translateX(0);
        }

        10%, 30%, 50%, 70%, 90% {
            transform: translateX(-5px);
        }

        20%, 40%, 60%, 80% {
            transform: translateX(5px);
        }

        }

        .workflow-info {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid #dee2e6;
        }

        .info-item {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
        }

            .info-item:last-child {
                margin-bottom: 0;
            }

        .info-icon {
            width: 24px;
            height: 24px;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #667eea;
        }

        .processing-steps {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 25px;
        }

        .step-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 10px;
            padding: 8px 0;
        }

            .step-item:last-child {
                margin-bottom: 0;
            }

        .step-icon {
            margin-right: 10px;
            margin-top: 2px;
        }

        .workflow-steps {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            border: 1px solid #90caf9;
        }

        .workflow-step {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 12px;
            border-left: 4px solid #667eea;
            animation: fadeInLeft 0.5s ease-out;
        }

            .workflow-step:last-child {
                margin-bottom: 0;
            }

        @keyframes fadeInLeft {
            from

        {
            opacity: 0;
            transform: translateX(-20px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }

        }

        .status-section {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            border: 1px solid #ffc107;
        }

        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .status-card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            border-left: 4px solid #28a745;
        }

            .status-card.new {
                border-left-color: #ffc107;
            }

        .sql-container {
            background: #2d2d2d;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            position: relative;
            max-height: 600px;
            overflow-y: auto;
        }

        .sql-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }

        .sql-actions {
            display: flex;
            gap: 10px;
        }

        .sql-container pre {
            margin: 0;
            color: #f8f8f2;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
        }

        .copy-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 12px;
        }

            .copy-btn:hover {
                background: #764ba2;
                transform: translateY(-2px);
            }

            .copy-btn.copied {
                background: #28a745;
            }

        .download-btn {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 12px;
        }

            .download-btn:hover {
                background: #138496;
                transform: translateY(-2px);
            }

        .metrics-section {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid #28a745;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .metric-card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            text-center;
            border-left: 4px solid #28a745;
        }

        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }

        .metric-label {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }

        .warning-section {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 25px;
            border: 1px solid #ffc107;
        }

        .warning-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 8px;
        }

            .warning-item:last-child {
                margin-bottom: 0;
            }

        .action-section {
            background: white;
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            border: 2px solid #667eea;
        }

        .btn-primary-custom {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            padding: 12px 30px;
            border-radius: 50px;
            transition: all 0.3s ease;
            margin: 0 10px;
        }

            .btn-primary-custom:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(0,0,0,0.2);
                color: white;
            }

        .accordion-custom .accordion-item {
            border: none;
            margin-bottom: 10px;
            border-radius: 10px;
            overflow: hidden;
        }

        .accordion-custom .accordion-button {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: none;
            border-radius: 10px;
        }

            .accordion-custom .accordion-button:not(.collapsed) {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }

        .error-details {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            border: 1px solid #dc3545;
        }

        @media (max-width: 768px) {
            .result-card

        {
            padding: 20px;
            margin: 10px;
        }

        .metrics-grid,
        .status-grid {
            grid-template-columns: 1fr;
        }

        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-custom">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/">
                <i class="fas fa-brain me-2 text-primary"></i>AI Workflow Creator
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/Workflow"><i class="fas fa-plus me-1"></i>Create New</a>
                <a class="nav-link" href="/Workflow/List"><i class="fas fa-list me-1"></i>All Workflows</a>
            </div>
        </div>
    </nav>

    <div class="container result-container">
        <div class="row">
            <div class="col-12">

                <!-- Success/Error Header -->
                <div class="result-card">
                    @if (Model.Success)
                    {
                        <div class="success-header">
                            <div class="success-icon">
                                <i class="fas fa-check-circle"></i>
                            </div>
                            <h1 class="text-success fw-bold">Workflow Generated Successfully!</h1>
                            <p class="text-muted fs-5">@Model.ProcessingSummary</p>
                            <div class="badge bg-success fs-6">
                                <i class="fas fa-clock me-1"></i>Completed in @Model.ResponseTimeMs ms
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="success-header">
                            <div class="error-icon">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <h1 class="text-danger fw-bold">Processing Encountered Issues</h1>
                            <p class="text-muted fs-5">@Model.Message</p>
                            <div class="badge bg-danger fs-6">
                                <i class="fas fa-clock me-1"></i>Stopped after @Model.ResponseTimeMs ms
                            </div>
                        </div>
                    }
                </div>

                <!-- Workflow Information -->
                @if (Model.Workflow != null)
                {
                    <div class="result-card">
                        <h3><i class="fas fa-info-circle me-2"></i>Workflow Details</h3>
                        <div class="workflow-info">
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-tag"></i></div>
                                <div><strong>Name:</strong> @Model.Workflow.Name</div>
                            </div>
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-hashtag"></i></div>
                                <div><strong>ID:</strong> @Model.Workflow.Id</div>
                            </div>
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-calendar"></i></div>
                                <div><strong>Created:</strong> @Model.Workflow.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss UTC")</div>
                            </div>
                            <div class="info-item">
                                <div class="info-icon"><i class="fas fa-flag"></i></div>
                                <div><strong>Status:</strong> <span class="badge bg-@(Model.Success ? "success" : "warning")">@Model.Workflow.Status</span></div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Processing Steps -->
                @if (Model.ProcessingSteps != null && Model.ProcessingSteps.Any())
                {
                    <div class="result-card">
                        <h3><i class="fas fa-list-ol me-2"></i>Processing Timeline</h3>
                        <div class="processing-steps">
                            @foreach (var step in Model.ProcessingSteps)
                            {
                                <div class="step-item">
                                    <div class="step-icon">
                                        @if (step.StartsWith("✓"))
                                        {
                                            <i class="fas fa-check-circle text-success"></i>
                                        }
                                        else if (step.StartsWith("⚠"))
                                        {
                                            <i class="fas fa-exclamation-triangle text-warning"></i>
                                        }
                                        else if (step.StartsWith("✗"))
                                        {
                                            <i class="fas fa-times-circle text-danger"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-info-circle text-info"></i>
                                        }
                                    </div>
                                    <div>@step</div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Workflow Steps -->
                @if (Model.Steps != null && Model.Steps.Any())
                {
                    <div class="result-card">
                        <h3><i class="fas fa-project-diagram me-2"></i>AI-Analyzed Workflow Steps</h3>
                        <div class="workflow-steps">
                            @for (int i = 0; i < Model.Steps.Count; i++)
                            {
                                <div class="workflow-step" style="animation-delay: @(i * 0.1)s">
                                    <div class="d-flex align-items-start">
                                        <span class="badge bg-primary rounded-pill me-3 mt-1">@(i + 1)</span>
                                        <div>@Model.Steps[i]</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Status Mapping -->
                @if (Model.AllStatuses.Any())
                {
                    <div class="result-card">
                        <h3><i class="fas fa-tags me-2"></i>Status Analysis</h3>
                        <div class="status-section">
                            <p class="mb-3">AI identified the following status requirements for your workflow:</p>
                            <div class="status-grid">
                                @if (Model.ExistingStatuses != null && Model.ExistingStatuses.Any())
                                {
                                    @foreach (var status in Model.ExistingStatuses)
                                    {
                                        <div class="status-card">
                                            <div class="d-flex align-items-center mb-2">
                                                <i class="fas fa-check-circle text-success me-2"></i>
                                                <strong>@status.Name</strong>
                                                <span class="badge bg-success ms-auto">Existing</span>
                                            </div>
                                            <div class="small text-muted mb-1">ID: @status.ExistingId</div>
                                            <div class="small">@status.Description</div>
                                        </div>
                                    }
                                }

                                @if (Model.RequiredStatuses != null && Model.RequiredStatuses.Any())
                                {
                                    @foreach (var status in Model.RequiredStatuses)
                                    {
                                        <div class="status-card new">
                                            <div class="d-flex align-items-center mb-2">
                                                <i class="fas fa-plus-circle text-warning me-2"></i>
                                                <strong>@status.Name</strong>
                                                <span class="badge bg-warning ms-auto">New</span>
                                            </div>
                                            <div class="small text-muted mb-1">Needs manual creation</div>
                                            <div class="small">@status.Description</div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Warnings -->
                @if (Model.HasWarnings)
                {
                    <div class="result-card">
                        <h3><i class="fas fa-exclamation-triangle me-2"></i>Warnings & Recommendations</h3>
                        <div class="warning-section">
                            @if (Model.ValidationIssues != null && Model.ValidationIssues.Any())
                            {
                                <h6><i class="fas fa-search me-2"></i>Analysis Issues:</h6>
                                @foreach (var issue in Model.ValidationIssues)
                                {
                                    <div class="warning-item">
                                        <i class="fas fa-exclamation-circle text-warning me-2 mt-1"></i>
                                        <div>@issue</div>
                                    </div>
                                }
                            }

                            @if (Model.SqlWarnings != null && Model.SqlWarnings.Any())
                            {
                                <h6 class="mt-3"><i class="fas fa-database me-2"></i>SQL Generation Issues:</h6>
                                @foreach (var warning in Model.SqlWarnings)
                                {
                                    <div class="warning-item">
                                        <i class="fas fa-exclamation-circle text-warning me-2 mt-1"></i>
                                        <div>@warning</div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }

                <!-- Generated SQL -->
                @if (Model.HasGeneratedSql)
                {
                    <div class="result-card">
                        <h3><i class="fas fa-database me-2"></i>Generated SQL Code</h3>
                        <p class="text-muted mb-3">Copy this SQL and execute it in SQL Server Management Studio to create your workflow database structure.</p>

                        <div class="sql-container">
                            <div class="sql-header">
                                <div class="text-white">
                                    <i class="fas fa-code me-2"></i><strong>SQL Server Statements</strong>
                                </div>
                                <div class="sql-actions">
                                    <button class="copy-btn" onclick="copySqlToClipboard()">
                                        <i class="fas fa-copy me-1"></i>Copy
                                    </button>
                                    <button class="download-btn" onclick="downloadSql()">
                                        <i class="fas fa-download me-1"></i>Download
                                    </button>
                                </div>
                            </div>
                            <pre><code id="sqlCode" class="language-sql">@Model.GeneratedSql</code></pre>
                        </div>
                    </div>
                }

                <!-- Performance Metrics -->
                @if (Model.Success)
                {
                    <div class="result-card">
                        <h3><i class="fas fa-tachometer-alt me-2"></i>Performance Metrics</h3>
                        <div class="metrics-section">
                            <div class="metrics-grid">
                                <div class="metric-card">
                                    <div class="metric-value">@Model.ResponseTimeMs</div>
                                    <div class="metric-label">Total Time (ms)</div>
                                </div>
                                @if (Model.AnalysisTimeMs > 0)
                                {
                                    <div class="metric-card">
                                        <div class="metric-value">@Model.AnalysisTimeMs</div>
                                        <div class="metric-label">Analysis Time (ms)</div>
                                    </div>
                                }
                                @if (Model.SqlGenerationTimeMs > 0)
                                {
                                    <div class="metric-card">
                                        <div class="metric-value">@Model.SqlGenerationTimeMs</div>
                                        <div class="metric-label">SQL Generation (ms)</div>
                                    </div>
                                }
                                @if (Model.TokensUsed > 0)
                                {
                                    <div class="metric-card">
                                        <div class="metric-value">@Model.TokensUsed</div>
                                        <div class="metric-label">AI Tokens Used</div>
                                    </div>
                                }
                                <div class="metric-card">
                                    <div class="metric-value">@Model.StepCount</div>
                                    <div class="metric-label">Steps Identified</div>
                                </div>
                                <div class="metric-card">
                                    <div class="metric-value">@Model.NewStatusCount</div>
                                    <div class="metric-label">New Statuses Needed</div>
                                </div>
                            </div>

                            <div class="mt-4">
                                <div class="row">
                                    <div class="col-md-6">
                                        <strong><i class="fas fa-info-circle me-2"></i>AI Providers:</strong>
                                        <div class="small text-muted">@Model.ProviderInfo</div>
                                    </div>
                                    <div class="col-md-6">
                                        <strong><i class="fas fa-memory me-2"></i>Performance:</strong>
                                        <div class="small text-muted">@Model.PerformanceInfo</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Error Details -->
                @if (!Model.Success)
                {
                    <div class="result-card">
                        <h3><i class="fas fa-bug me-2"></i>Error Details</h3>
                        <div class="error-details">
                            <div class="alert alert-danger">
                                <h6><i class="fas fa-exclamation-triangle me-2"></i>What happened?</h6>
                                <p class="mb-0">@Model.Message</p>
                            </div>

                            <h6><i class="fas fa-tools me-2"></i>Troubleshooting Steps:</h6>
                            <ul class="mb-0">
                                <li>Check that your AI services are running and properly configured</li>
                                <li>Verify your API keys and network connectivity</li>
                                <li>Try simplifying your workflow description</li>
                                <li>Visit the <a href="/Workflow/TestConnection">connection test page</a> to diagnose issues</li>
                                <li>If the problem persists, try again in a few minutes</li>
                            </ul>
                        </div>
                    </div>
                }

                <!-- Advanced Details (Collapsible) -->
                @if (Model.Success && (!string.IsNullOrEmpty(Model.SystemPrompt) || !string.IsNullOrEmpty(Model.UserPrompt)))
                {
                    <div class="result-card">
                        <h3><i class="fas fa-cogs me-2"></i>Advanced Details</h3>
                        <div class="accordion accordion-custom" id="advancedAccordion">
                            @if (!string.IsNullOrEmpty(Model.SystemPrompt))
                            {
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#systemPrompt">
                                            <i class="fas fa-terminal me-2"></i>System Prompt (AI Instructions)
                                        </button>
                                    </h2>
                                    <div id="systemPrompt" class="accordion-collapse collapse" data-bs-parent="#advancedAccordion">
                                        <div class="accordion-body">
                                            <pre class="bg-light p-3 rounded"><code>@Model.SystemPrompt</code></pre>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(Model.UserPrompt))
                            {
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#userPrompt">
                                            <i class="fas fa-user me-2"></i>User Prompt (Analysis Input)
                                        </button>
                                    </h2>
                                    <div id="userPrompt" class="accordion-collapse collapse" data-bs-parent="#advancedAccordion">
                                        <div class="accordion-body">
                                            <pre class="bg-light p-3 rounded"><code>@Model.UserPrompt</code></pre>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Action Buttons -->
                <div class="result-card">
                    <div class="action-section">
                        <h4><i class="fas fa-rocket me-2"></i>What's Next?</h4>
                        <p class="text-muted mb-4">Choose your next action to continue working with AI-powered workflows.</p>

                        <div class="d-flex flex-wrap justify-content-center gap-3">
                            <a href="/Workflow" class="btn btn-primary-custom">
                                <i class="fas fa-plus me-2"></i>Create Another Workflow
                            </a>
                            <a href="/Workflow/List" class="btn btn-outline-primary">
                                <i class="fas fa-list me-2"></i>View All Workflows
                            </a>

                            @if (Model.Workflow != null)
                            {
                                <form asp-action="ReAnalyze" asp-route-id="@Model.Workflow.Id" method="post" style="display: inline;">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-outline-secondary">
                                        <i class="fas fa-redo me-2"></i>Re-Analyze with Current AI
                                    </button>
                                </form>
                            }

                            <a href="/Workflow/TestConnection" class="btn btn-outline-info">
                                <i class="fas fa-network-wired me-2"></i>Test AI Services
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js"></script>
    <script>
        function copySqlToClipboard() {
            const sqlCode = document.getElementById('sqlCode').innerText;
            navigator.clipboard.writeText(sqlCode).then(function() {
                const btn = document.querySelector('.copy-btn');
                const originalText = btn.innerHTML;
                btn.innerHTML = '<i class="fas fa-check me-1"></i>Copied!';
                btn.classList.add('copied');

                setTimeout(() => {
                    btn.innerHTML = originalText;
                    btn.classList.remove('copied');
                }, 2000);
            }).catch(function(err) {
                console.error('Failed to copy SQL: ', err);
                alert('Failed to copy SQL to clipboard. Please copy manually.');
            });
        }

        function downloadSql() {
            const sqlCode = document.getElementById('sqlCode').innerText;
            const workflowName = '@(Model.Workflow?.Name ?? "Workflow")'.replace(/[^a-zA-Z0-9]/g, '_');
            const filename = `${workflowName}_SQL_${new Date().toISOString().split('T')[0]}.sql`;

            const element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(sqlCode));
            element.setAttribute('download', filename);
            element.style.display = 'none';

            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);

            // Visual feedback
            const btn = document.querySelector('.download-btn');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-check me-1"></i>Downloaded!';

            setTimeout(() => {
                btn.innerHTML = originalText;
            }, 2000);
        }

        // Animate metric cards on scroll
        function animateMetrics() {
            const metricCards = document.querySelectorAll('.metric-card');
            metricCards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
                card.style.animation = 'bounceIn 0.6s ease-out forwards';
            });
        }

        // Initialize animations when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Trigger metric animations
            setTimeout(animateMetrics, 500);

            // Initialize syntax highlighting
            if (typeof Prism !== 'undefined') {
                Prism.highlightAll();
            }
        });
    </script>
</body>
</html>