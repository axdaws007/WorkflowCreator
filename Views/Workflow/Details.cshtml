@model WorkflowCreator.Models.WorkflowModel
@{
    ViewData["Title"] = $"Workflow Details - {Model.Name}";
    var hasGeneratedSql = !string.IsNullOrEmpty(Model.GeneratedSql);
}

<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }

    .details-container {
        padding-top: 30px;
        padding-bottom: 50px;
    }

    .details-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.15);
        padding: 40px;
        margin-bottom: 30px;
        animation: slideUp 0.6s ease-out;
        position: relative;
        overflow: hidden;
    }

        .details-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .workflow-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .workflow-title {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .breadcrumb-section {
        margin-bottom: 25px;
    }

    .breadcrumb {
        background: white;
        border-radius: 15px;
        padding: 15px 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin-bottom: 0;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .info-item {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
        border-left: 4px solid #667eea;
    }

    .info-label {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
        margin-bottom: 5px;
    }

    .info-value {
        color: #2d3748;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

        .status-badge.status-generated {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
        }

        .status-badge.status-analyzed {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
            color: white;
        }

        .status-badge.status-processing {
            background: linear-gradient(135deg, #17a2b8 0%, #007bff 100%);
            color: white;
        }

        .status-badge.status-error {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
        }

        .status-badge.status-unknown {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            color: white;
        }

    .sql-section {
        background: #2d3748;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        color: white;
        position: relative;
        overflow: hidden;
    }

        .sql-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #667eea, #764ba2);
        }

    .sql-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .sql-actions {
        display: flex;
        gap: 10px;
    }

    .sql-content {
        background: #1a202c;
        border-radius: 10px;
        padding: 20px;
        overflow-x: auto;
        position: relative;
    }

    .sql-code {
        font-family: 'Courier New', monospace;
        font-size: 14px;
        line-height: 1.6;
        color: #e2e8f0;
        white-space: pre;
        margin: 0;
    }

    .copy-button {
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(102, 126, 234, 0.8);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 12px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

        .copy-button:hover {
            background: rgba(102, 126, 234, 1);
        }

    .copy-indicator {
        position: absolute;
        top: 15px;
        right: 120px;
        background: #28a745;
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

        .copy-indicator.show {
            opacity: 1;
        }

    .floating-actions {
        position: fixed;
        bottom: 30px;
        right: 30px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        z-index: 1000;
    }

    .btn-floating {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: none;
        color: white;
        font-size: 20px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

        .btn-floating:hover {
            transform: scale(1.1);
            box-shadow: 0 12px 30px rgba(0,0,0,0.3);
            color: white;
        }

        .btn-floating.primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .btn-floating.success {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        .btn-floating.warning {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
        }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .metric-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        border-left: 4px solid #667eea;
    }

    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
        margin-bottom: 5px;
    }

    .metric-label {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .accordion-custom {
        margin-top: 25px;
    }

        .accordion-custom .accordion-body {
            background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
            color: white;
        }

        .accordion-custom .accordion-item {
            border: none;
            margin-bottom: 10px;
            border-radius: 10px;
            overflow: hidden;
        }

        .accordion-custom .accordion-button {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: none;
            border-radius: 10px;
        }

            .accordion-custom .accordion-button:not(.collapsed) {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }

    @@media (max-width: 768px) {
        .details-card

    {
        padding: 20px;
        margin: 10px;
    }

    .info-grid {
        grid-template-columns: 1fr;
    }

    .sql-header {
        flex-direction: column;
        gap: 15px;
        align-items: flex-start;
    }

    .sql-actions {
        width: 100%;
        justify-content: center;
    }

    .metrics-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .floating-actions {
        bottom: 20px;
        right: 20px;
    }

    }
</style>

<div class="container details-container">
    <div class="row">
        <div class="col-12">

            <!-- Breadcrumb -->
            <div class="breadcrumb-section">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="/Workflow" class="text-decoration-none">
                                <i class="fas fa-home me-1"></i>Create
                            </a>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="/Workflow/List" class="text-decoration-none">
                                <i class="fas fa-list me-1"></i>All Workflows
                            </a>
                        </li>
                        <li class="breadcrumb-item active" aria-current="page">
                            <i class="fas fa-eye me-1"></i>Details
                        </li>
                    </ol>
                </nav>
            </div>

            <!-- Workflow Header -->
            <div class="details-card">
                <div class="workflow-header">
                    <h1 class="workflow-title fw-bold">
                        <i class="fas fa-project-diagram me-2"></i>@Model.Name
                    </h1>
                    <div class="mb-3">
                        <span class="status-badge status-@(Model.Status?.ToLower() ?? "unknown")">
                            @Model.Status
                        </span>
                    </div>
                </div>

                <!-- Basic Information Grid -->
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">Workflow ID</div>
                        <div class="info-value"># @Model.Id</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Created Date</div>
                        <div class="info-value">@Model.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Status</div>
                        <div class="info-value">@Model.Status</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Has Generated SQL</div>
                        <div class="info-value">
                            @if (hasGeneratedSql)
                            {
                                <span class="text-success"><i class="fas fa-check me-1"></i>Yes</span>
                            }
                            else
                            {
                                <span class="text-warning"><i class="fas fa-times me-1"></i>No</span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Description -->
            <div class="details-card">
                <h3><i class="fas fa-file-alt me-2"></i>Workflow Description</h3>
                <div class="description-content">
                    <p class="lead">@Model.Description</p>
                </div>
            </div>

            <!-- Generated SQL -->
            @if (hasGeneratedSql)
            {
                <div class="details-card">
                    <div class="sql-section">
                        <div class="sql-header">
                            <h3><i class="fas fa-database me-2"></i>Generated SQL Implementation</h3>
                            <div class="sql-actions">
                                <button class="btn btn-outline-light btn-sm" onclick="copySql()">
                                    <i class="fas fa-copy me-1"></i>Copy
                                </button>
                                <button class="btn btn-outline-light btn-sm" onclick="downloadSql()">
                                    <i class="fas fa-download me-1"></i>Download
                                </button>
                            </div>
                        </div>
                        <div class="sql-content">
                            <pre class="sql-code" id="sqlCode">@Model.GeneratedSql</pre>
                            <button class="copy-button" onclick="copySql()">
                                <i class="fas fa-copy"></i>
                            </button>
                            <div class="copy-indicator" id="copyIndicator">Copied!</div>
                        </div>
                    </div>
                </div>
            }

            <!-- Action Buttons -->
            <div class="details-card text-center">
                <div class="d-flex gap-3 justify-content-center flex-wrap">
                    <a href="/Workflow/List" class="btn btn-primary btn-lg">
                        <i class="fas fa-arrow-left me-2"></i>Back to List
                    </a>
                    <a href="/Workflow" class="btn btn-outline-primary btn-lg">
                        <i class="fas fa-plus me-2"></i>Create New Workflow
                    </a>
                    @if (hasGeneratedSql)
                    {
                        <button class="btn btn-success btn-lg" onclick="downloadSql()">
                            <i class="fas fa-download me-2"></i>Download SQL
                        </button>
                    }
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Floating Actions -->
<div class="floating-actions">
    <button type="button" class="btn-floating primary" title="Create New Workflow" onclick="window.location.href='/Workflow'">
        <i class="fas fa-plus"></i>
    </button>
    @if (hasGeneratedSql)
    {
        <button type="button" class="btn-floating success" title="Download SQL" onclick="downloadSql()">
            <i class="fas fa-download"></i>
        </button>
    }
    <button type="button" class="btn-floating warning" title="Back to List" onclick="window.location.href='/Workflow/List'">
        <i class="fas fa-list"></i>
    </button>
</div>

<script>
    function copySql() {
        const sqlCode = document.getElementById('sqlCode');
        const indicator = document.getElementById('copyIndicator');

        navigator.clipboard.writeText(sqlCode.textContent).then(function() {
            indicator.classList.add('show');
            setTimeout(() => indicator.classList.remove('show'), 2000);
        }).catch(function(err) {
            console.error('Failed to copy SQL: ', err);
            alert('Failed to copy SQL to clipboard');
        });
    }

    function downloadSql() {
        const sqlContent = document.getElementById('sqlCode').textContent;
        const workflowName = '@Html.Raw(Model.Name.Replace("'", "\\'"))';
        const filename = `${workflowName.replace(/[^a-z0-9]/gi, '_')}_Workflow.sql`;

        const element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(sqlContent));
        element.setAttribute('download', filename);
        element.style.display = 'none';

        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }

    // Syntax highlighting for SQL (basic)
    document.addEventListener('DOMContentLoaded', function() {
        const sqlCode = document.getElementById('sqlCode');
        if (sqlCode) {
            // Simple SQL syntax highlighting
            let html = sqlCode.innerHTML;
            html = html.replace(/\b(INSERT|INTO|VALUES|SELECT|FROM|WHERE|UPDATE|DELETE|CREATE|TABLE|ALTER|DROP)\b/gi, '<span style="color: #ff6b6b; font-weight: bold;">$1</span>');
            html = html.replace(/\b(NULL|NOT|AND|OR|IN|EXISTS|LIKE)\b/gi, '<span style="color: #4ecdc4; font-weight: bold;">$1</span>');
            html = html.replace(/(\d+)/g, '<span style="color: #45b7d1;">$1</span>');
            html = html.replace(/'([^']*)'/g, '<span style="color: #96ceb4;">\'$1\'</span>');
            html = html.replace(/(--[^\n]*)/g, '<span style="color: #888; font-style: italic;">$1</span>');
            sqlCode.innerHTML = html;
        }
    });
</script>